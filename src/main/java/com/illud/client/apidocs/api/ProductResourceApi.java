/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.illud.client.apidocs.api;

import com.illud.client.apidocs.model.Product;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-06-07T22:31:31.235219+05:30[Asia/Kolkata]")

@Validated
@Api(value = "ProductResource", description = "the ProductResource API")
public interface ProductResourceApi {

    /**
     * POST /api/products : createProduct
     *
     * @param product product (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "createProduct", nickname = "createProductUsingPOST", notes = "", response = Product.class, tags={ "product-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Product.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/products",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Product> createProductUsingPOST(@ApiParam(value = "product" ,required=true )  @Valid @RequestBody Product product);


    /**
     * DELETE /api/products/{id} : deleteProduct
     *
     * @param id id (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "deleteProduct", nickname = "deleteProductUsingDELETE", notes = "", tags={ "product-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/api/products/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteProductUsingDELETE(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    /**
     * GET /api/products : getAllProducts
     *
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "getAllProducts", nickname = "getAllProductsUsingGET", notes = "", response = Product.class, responseContainer = "List", tags={ "product-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Product.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/products",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<Product>> getAllProductsUsingGET();


    /**
     * GET /api/products/{id} : getProduct
     *
     * @param id id (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "getProduct", nickname = "getProductUsingGET", notes = "", response = Product.class, tags={ "product-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Product.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/products/{id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Product> getProductUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    /**
     * PUT /api/products : updateProduct
     *
     * @param product product (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "updateProduct", nickname = "updateProductUsingPUT", notes = "", response = Product.class, tags={ "product-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Product.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/products",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<Product> updateProductUsingPUT(@ApiParam(value = "product" ,required=true )  @Valid @RequestBody Product product);

}
